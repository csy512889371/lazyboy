#ifndef MOVE_H_
#define MOVE_H_

#include "base.h"
#include "position.h"

// 合法数组数据结构的原理
/*
 先用二进制数字表示不同棋子
 车马炮			00000001  1
 将	 			00000010  2
 士   			00000100  4
 象   			00001000  8
 红兵			00010000  16
 黑兵			00100000  32
 然后将棋子数字组合
 车马炮将红兵		00010011 19
 车马炮将黑兵		00100011 35
 车马炮将士红兵	00010111 23
 车马炮将士黑兵	00100111 39
 车马炮将象红兵	00011011 27
 车马炮将象黑兵	00101011 43
 车马炮象红兵		00011001 25
 车马炮象黑兵		00101001 41
 车马炮象红兵黑兵	00111001 57
 车马炮红兵		00010001 17
 车马炮黑兵       00100001 33
 车马炮红兵黑兵	00110001 49
 */

const int LEGAL_POSITION[256] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0,17,17,25,23,19,23,25,17,17, 0, 0, 0, 0,
		0, 0, 0,17,17,17,19,23,19,17,17,17, 0, 0, 0, 0,
		0, 0, 0,25,17,17,23,27,23,17,17,25, 0, 0, 0, 0,
		0, 0, 0,49,17,49,17,49,17,49,17,49, 0, 0, 0, 0,
		0, 0, 0,49,17,57,17,49,17,57,17,49, 0, 0, 0, 0,
		0, 0, 0,49,33,57,33,49,33,57,33,49, 0, 0, 0, 0,
		0, 0, 0,49,33,49,33,49,33,49,33,49, 0, 0, 0, 0,
		0, 0, 0,41,33,33,39,43,39,33,33,41, 0, 0, 0, 0,
		0, 0, 0,33,33,33,35,39,35,33,33,33, 0, 0, 0, 0,
		0, 0, 0,33,33,41,39,35,39,41,33,33, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
const int RED_PAWN_TYPE = 7;
const int BLACK_PAWN_TYPE = 8;
const int POSITION_MASK[] = {2, 4, 8, 1, 1, 1, 0, 16, 32};

const int DIR[] = {-16, +1, +16, -1};
const int KING_DIR[] = {-16, +1, +16, -1};
const int ADVISOR_DIR[] = {-17, -15, +17, +15};
const int BISHOP_DIR[] = {-34, -30, +34, +30};
const int BISHOP_PIN_DIR[] = {-17, -15, +17, +15};
const int KNIGHT_DIR[] = {-33, -31, -14, +18, +33, +31, +14, -18};
const int KNIGHT_PIN_DIR[] = {-16, -16, +1, +1, +16, +16, -1, -1};
const int RED_PAWN_DIR[] = {-16, +1, -1};
const int BLACK_PAWN_DIR[] = {+16, +1, -1};

extern int KING_HIT [256][10];
extern int ADVISOR_HIT [256][10];
extern int BISHOP_HIT [256][10];
extern int BISHOP_PIN [256][10];
extern int KNIGHT_HIT [256][10];
extern int KNIGHT_PIN [256][10];
extern int PAWN_HIT [256][2][10];

extern int LOWER_P [1<<16][16][2];
extern int HIGHER_P [1<<16][16][2];

void InitMove ( void );

#endif /* MOVE_H_ */
