/*
 * chessboard.h
 *
 *  Created on: 2017年3月25日
 *      Author: peteryuanpan
 */

#ifndef CHESSBOARD_H_
#define CHESSBOARD_H_

#include "base.h"

inline int SRC ( const int mv ) {
	return mv & (int) 255;
}

inline int DST ( const int mv ) {
	return mv >> 8;
}

struct PositionStruct {
	// 基本成员
	int player;	// 轮到哪方走，0表示红方，1表示黑方
	int square[256];	// 每个格子放的棋子，0表示没有棋子
	int piece[48];	// 每个棋子放的位置，0表示被吃
	int bitRow[16];	// 每行的位压
	int bitCol[16]; // 每列的位压
	long long zobrist; // zobrist值

	inline bool PlayerRed ( void ) const {
		return player == 0;
	}
	inline bool PlayerBlack ( void ) const {
		return player == 1;
	}

	bool Check ( void ) const; // 执棋方将军
	bool Checked ( void ) const; // 执棋方被将军

	void MakeMove ( const int mv ); // 走一步棋
	void UndoMakeMove ( const int mv ); // 撤回走法

	int GenCapMove ( int *move ) const; // 生成吃子着法
	int GenNonCapMove ( int *move ) const; // 生成非吃子着法
	int GenAllMove ( int *move ) const; // 生成所有着法

	inline bool Empty ( const int p ) const { // 判断p位置无棋子
		return square[p] == 0;
	}
	inline bool NonEmpty ( const int p ) const { // 判断p位置有棋子
		return square[p] != 0;
	}

	// 以下函数参见hash.cpp
	void GenZobrist ( void ); // 生成zobrist值
	bool Duplicatede ( void ) const; // 在到根路径上重复


};


#endif /* CHESSBOARD_H_ */
