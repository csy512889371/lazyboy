/*
 * position.h
 *
 *  Created on: 2017年3月25日
 *      Author: peteryuanpan
 */

#ifndef POSITION_H_
#define POSITION_H_

#include "base.h"

inline unint8 SRC ( const unint16 mv ) {
	return mv & (unint16) 255;
}

inline unint8 DST ( const unint16 mv ) {
	return mv >> 8;
}

struct PositionStruct {
	// 基本成员
	unint8 player;	// 轮到哪方走，0表示红方，1表示黑方
	unint8 square[256];	// 每个格子放的棋子，0表示没有棋子
	unint8 piece[48];	// 每个棋子放的位置，0表示被吃
	unint16 bitRow[16];	// 每行的位压
	unint16 bitCol[16]; // 每列的位压
	int64 zobrist; // zobrist值

	inline bool PlayerRed ( void ) const {
		return player == 0;
	}
	inline bool PlayerBlack ( void ) const {
		return player == 1;
	}

	bool Check ( void ) const; // 执棋方将军
	bool Checked ( void ) const; // 执棋方被将军

	void MakeMove ( const unint16 mv ); // 走一步棋
	void UndoMakeMove ( const unint16 mv ); // 撤回走法

	unint8 GenCapMove ( unint16 *move ) const; // 生成吃子着法
	unint8 GenNonCapMove ( unint16 *move ) const; // 生成非吃子着法
	unint8 GenAllMove ( unint16 *move ) const; // 生成所有着法

	inline bool Empty ( const unint8 p ) const { // 判断p位置无棋子
		return square[p] == 0;
	}
	inline bool NonEmpty ( const unint8 p ) const { // 判断p位置有棋子
		return square[p] != 0;
	}
};


#endif /* POSITION_H_ */
