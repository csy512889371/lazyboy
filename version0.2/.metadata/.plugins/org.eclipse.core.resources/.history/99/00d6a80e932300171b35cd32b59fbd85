#include "evaluate.h"
#include "search.h"
#include "position.h"
#include "move.h"

// 中局/残局状态分值
int PositionStruct::MidGameValue ( void ) {
	int v = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		// 1. 计算马的分值
		for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
			if ( piece[i+ST] ) {
				v += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 2. 计算车的分值
		for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) {
			if ( piece[i+ST] ) {
				v += ROOK_MIDGAME_VALUE;
			}
		}
		// 3. 计算炮的分值
		for ( int i = CANNON_FROM; i <= CANNON_TO; i ++ ) {
			if ( piece[i+ST] ) {
				v += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 4. 计算其他子的分值，不计算将的
		for ( int i = ADVISOR_FROM; i <= BISHOP_TO; i ++ ) {
			if ( piece[i+ST] ) {
				v += OTHER_MIDGAME_VALUE;
			}
		}
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			if ( piece[i+ST] ) {
				v += OTHER_MIDGAME_VALUE;
			}
		}
	}
	return v;
}

// 进攻/未进攻状态分值
int PositionStruct::AttackValue ( void ) {
	int ST = SIDE_TYPE ( player );
	int OP = OPP_SIDE_TYPE ( player );
	int v = 0;

	// 1. 计算马的分值
	for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
		if ( piece[i+ST] ) {
			if ( InOppSideBoard(i+ST, piece[i+ST]) ) {
				v += 2;
			}
		}
	}
	// 2. 计算车的分值
	for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) {
		if ( piece[i+ST] ) {
			if ( InOppSideBoard(i+ST, piece[i+ST]) ) {
				v += 2;
			}
		}
	}
	// 3. 计算炮的分值
	for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
		if ( piece[i+ST] ) {
			if ( InOppSideBoard(i+ST, piece[i+ST]) ) {
				v += 1;
			}
		}
	}
	// 4. 计算兵的分值
	for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
		if ( piece[i+ST] ) {
			if ( InOppSideBoard(i+ST, piece[i+ST]) ) {
				v += 1;
			}
		}
	}
}

// 被进攻/未被进攻状态分值
int PositionStruct::AttackedValue ( void ) {
	return 0;
}

// 打分，子力平衡
int PositionStruct::Material ( void ) {
	// 1. 计算局面阶段分值
	int midv = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		// 计算马的分值
		for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
			if ( piece[i+ST] ) {
				midv += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 计算车的分值
		for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) {
			if ( piece[i+ST] ) {
				midv += ROOK_MIDGAME_VALUE;
			}
		}
		// 计算炮的分值
		for ( int i = CANNON_FROM; i <= CANNON_TO; i ++ ) {
			if ( piece[i+ST] ) {
				midv += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 计算其他子的分值，不计算将的
		for ( int i = ADVOR_FROM; i <= BISHOP_TO; i ++ ) {
			if ( piece[i+ST] ) {
				midv += OTHER_MIDGAME_VALUE;
			}
		}
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			if ( piece[i+ST] ) {
				midv += OTHER_MIDGAME_VALUE;
			}
		}
	}
}

// 打分，车的灵活性
int PositionStruct::RookMobility ( void ) {
	return 0;
}

// 打分，马的阻碍
int PositionStruct::KnightTrap ( void ) {
	return 0;
}

// 给局面打分
int PositionStruct::Evaluate ( void ) {
	return 0;
}
