#ifndef MOVE_H_
#define MOVE_H_

#include "base.h"
#include "position.h"

//两种棋盘坐标表示法下的字符转换
/*
 a9 b9 c9 d9 e9 f9 g9 h9 i9     51  52  53  54  55  56  57  58  59  // LINE 3
 a8 b8 c8 d8 e8 f8 g8 h8 i8     67  68  69  70  71  72  73  74  75  // LINE 4
 a7 b7 c7 d7 e7 f7 g7 h7 i7     83  84  85  86  87  88  89  90  91  // LINE 5
 a6 b6 c6 d6 e6 f6 g6 h6 i6     99 100 101 102 103 104 105 106 107  // LINE 6
 a5 b5 c5 d5 e5 f5 g5 h5 i5    115 116 117 118 119 120 121 122 123  // LINE 7
 a4 b4 c4 d4 e4 f4 g4 h4 i4    131 132 133 134 135 136 137 138 139  // LINE 8
 a3 b3 c3 d3 e3 f3 g3 h3 i3    147 148 149 150 151 152 153 154 155  // LINE 9
 a2 b2 c2 d2 e2 f2 g2 h2 i2    163 164 165 166 167 168 169 170 171  // LINE 10
 a1 b1 c1 d1 e1 f1 g1 h1 i1    179 180 181 182 183 184 185 186 187  // LINE 11
 a0 b0 c0 d0 e0 f0 g0 h0 i0    195 196 197 198 199 200 201 202 203  // LINE 12

 							// C3  C4  C5  C6  C7  C8  C9  C10 C11
 */

// 合法数组数据结构的原理
/*
 先用二进制数字表示不同棋子
 车马炮			00000001  1
 将	 			00000010  2
 士   			00000100  4
 象   			00001000  8
 红兵			00010000  16
 黑兵			00100000  32

 然后将棋子数字组合
 车马炮将红兵		00010011 19
 车马炮将黑兵		00100011 35
 车马炮将士红兵	00010111 23
 车马炮将士黑兵	00100111 39
 车马炮将象红兵	00011011 27
 车马炮将象黑兵	00101011 43
 车马炮象红兵		00011001 25
 车马炮象黑兵		00101001 41
 车马炮象红兵黑兵	00111001 57
 车马炮红兵		00010001 17
 车马炮黑兵       00100001 33
 车马炮红兵黑兵	00110001 49
 */

const int LEGAL_POSITION[256] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0,17,17,25,23,19,23,25,17,17, 0, 0, 0, 0,
		0, 0, 0,17,17,17,19,23,19,17,17,17, 0, 0, 0, 0,
		0, 0, 0,25,17,17,23,27,23,17,17,25, 0, 0, 0, 0,
		0, 0, 0,49,17,49,17,49,17,49,17,49, 0, 0, 0, 0,
		0, 0, 0,49,17,57,17,49,17,57,17,49, 0, 0, 0, 0,
		0, 0, 0,49,33,57,33,49,33,57,33,49, 0, 0, 0, 0,
		0, 0, 0,49,33,49,33,49,33,49,33,49, 0, 0, 0, 0,
		0, 0, 0,41,33,33,39,43,39,33,33,41, 0, 0, 0, 0,
		0, 0, 0,33,33,33,35,39,35,33,33,33, 0, 0, 0, 0,
		0, 0, 0,33,33,41,39,35,39,41,33,33, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
const int RED_PAWN_TYPE = 7;
const int BLACK_PAWN_TYPE = 8;
const int POSITION_MASK[] = {2, 4, 8, 1, 1, 1, 0, 16, 32};

const int DIR[] = {-16, +1, +16, -1};
const int KING_DIR[] = {-16, +1, +16, -1};
const int ADVISOR_DIR[] = {-17, -15, +17, +15};
const int BISHOP_DIR[] = {-34, -30, +34, +30};
const int BISHOP_PIN_DIR[] = {-17, -15, +17, +15};
const int KNIGHT_DIR[] = {-33, -31, -14, +18, +33, +31, +14, -18};
const int KNIGHT_PIN_DIR[] = {-16, -16, +1, +1, +16, +16, -1, -1};
const int RED_PAWN_DIR[] = {-16, +1, -1};
const int BLACK_PAWN_DIR[] = {+16, +1, -1};


extern int KING_HIT [256][10];
extern int ADVISOR_HIT [256][10];
extern int BISHOP_HIT [256][10];
extern int BISHOP_PIN [256][10];
extern int KNIGHT_HIT [256][10];
extern int KNIGHT_PIN [256][10];
extern int PAWN_HIT [256][2][10];

extern int LOWER_P [1<<16][16][2];
extern int HIGHER_P [1<<16][16][2];

extern bool CAN_MOVE [2][7][256][256];

void InitMove ( void );

#endif /* MOVE_H_ */
