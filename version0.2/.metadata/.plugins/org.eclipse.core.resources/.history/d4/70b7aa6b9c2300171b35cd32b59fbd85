#include "evaluate.h"
#include "search.h"
#include "position.h"
#include "move.h"

// 打分，子力平衡
int PositionStruct::Material ( void ) {
	// 1. 计算局面阶段分值
	int value = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		// 计算马的分值
		for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
			if ( piece[i+ST] ) {
				value += KNIGHT_CANNON_GAME_VALUE;
			}
		}
		// 计算车的分值
		for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) {
			if ( piece[i+ST] ) {
				value += ROOK_GAME_VALUE;
			}
		}
		// 计算炮的分值
		for ( int i = CANNON_FROM; i <= CANNON_TO; i ++ ) {
			if ( piece[i+ST] ) {
				value += KNIGHT_CANNON_GAME_VALUE;
			}
		}
		// 计算其他子的分值，不计算将的
		for ( int i = ADVISOR_FROM; i <= BISHOP_TO; i ++ ) {
			if ( piece[i+ST] ) {
				value += OTHER_GAME_VALUE;
			}
		}
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			if ( piece[i+ST] ) {
				value += OTHER_GAME_VALUE;
			}
		}
	}
	const int MIDGAME_VALUE = value;
	const int ENDGAME_VALUE = TOTAL_GAME_VALUE - MIDGAME_VALUE;

	// 2. 计算攻击状态分值
	int Attack = 0;
	int Attacked = 0;
	const int ST = SIDE_TYPE ( player );
	const int OP = OPP_SIDE_TYPE ( player );
	// 计算马和车的分值
	for ( int i = KNIGHT_FROM; i <= ROOK_TO; i ++ ) {
		if ( piece[i+ST] && InOppSideBoard(i+ST, piece[i+ST]) ) {
			Attack += 2;
		}
		if ( piece[i+OP] && InOppSideBoard(i+OP, piece[i+OP]) ) {
			Attacked += 2;
		}
	}
	// 计算炮和兵的分值
	for ( int i = CANNON_FROM; i <= PAWN_TO; i ++ ) {
		if ( piece[i+ST] && InOppSideBoard(i+ST, piece[i+ST]) ) {
			Attack += 1;
		}
		if ( piece[i+OP] && InOppSideBoard(i+OP, piece[i+OP]) ) {
			Attacked += 1;
		}
	}
	// 计算轻子数差
	int d = 0;
	for ( int i = KNIGHT_FROM; i <= CANNON_TO; i ++ ) {
		if ( piece[i+ST] > 0 && piece[i+OP] == 0 ) {
			d ++;
		}
		if ( piece[i+ST] == 0 && piece[i+OP] > 0 ) {
			d --;
		}
	}
	for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) { // 车多计算一次
		if ( piece[i+ST] > 0 && piece[i+OP] == 0 ) {
			d ++;
		}
		if ( piece[i+ST] == 0 && piece[i+OP] > 0 ) {
			d --;
		}
	}
	// 再更新攻击状态分值
	d > 0 ? (Attack += d * 2) : (Attacked += d * 2);
	Attack = MIN ( Attack, TOTAL_ATTACK_VALUE ); // 最多不超过8
	Attacked = MIN ( Attacked, TOTAL_ATTACK_VALUE );


	// 3. 计算子力平衡分值
	int MATERIAL_VAL = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		const int ATTACKING_VALUE = (ST == 0) ? Attack : Attacked; // 本方进攻值
		const int ATTACKLESS_VALUE = TOTAL_ATTACK_VALUE - ATTACKING_VALUE; // 本方非进攻值
		const int THREATENED_VALUE = (ST == 0) ? Attacked : Attack; // 本方被进攻值
		const int THREATLESS_VALUE = TOTAL_ATTACK_VALUE - THREATENED_VALUE; // 本方非被进攻值

		int val = 0;
		// 将
		for ( int i = KING_FROM; i <= KING_TO; i ++ ) {
			int p = 0;
			val += ( MIDGAME_VALUE * ATTACKING_VALUE * MIDGAME_ATTACKING_KING_PAWN[p] +
					ENDGAME_VALUE * ATTACKING_VALUE * ENDGAME_ATTACKING_KING_PAWN[p] +
					MIDGAME_VALUE * ATTACKLESS_VALUE * MIDGAME_ATTACKLESS_KING_PAWN[p] +
					ENDGAME_VALUE * ATTACKLESS_VALUE * ENDGAME_ATTACKLESS_KING_PAWN[p] )
							/ (TOTAL_GAME_VALUE * TOTAL_ATTACK_VALUE);
		}
		// 士、象
		for ( int i = ADVISOR_FROM; i <= BISHOP_TO; i ++ ) {
			int p = 0;
			val += ( THREATENED_VALUE * THREATENED_ADVISOR_BISHOP[p] + THREATLESS_VALUE * THREATLESS_ADVISOR_BISHOP[p])
							/ TOTAL_ATTACK_VALUE;
		}
		// 马
		for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
			int p = 0;
			val += ( MIDGAME_VALUE * MIDGAME_KNIGHT[p] + ENDGAME_VALUE * ENDGAME_KNIGHT[p]) / TOTAL_ATTACK_VALUE;
		}
		// 车

		// 炮

		// 兵
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			int p = 0;
			val += ( MIDGAME_VALUE * ATTACKING_VALUE * MIDGAME_ATTACKING_KING_PAWN[p] +
					ENDGAME_VALUE * ATTACKING_VALUE * ENDGAME_ATTACKING_KING_PAWN[p] +
					MIDGAME_VALUE * ATTACKLESS_VALUE * MIDGAME_ATTACKLESS_KING_PAWN[p] +
					ENDGAME_VALUE * ATTACKLESS_VALUE * ENDGAME_ATTACKLESS_KING_PAWN[p] )
							/ (TOTAL_GAME_VALUE * TOTAL_ATTACK_VALUE);
		}

		MATERIAL_VAL += (ST == 0) ? val : - val;
	}

	return MATERIAL_VAL;
}

// 打分，车的灵活性
int PositionStruct::RookMobility ( void ) {
	return 0;
}

// 打分，马的阻碍
int PositionStruct::KnightTrap ( void ) {
	return 0;
}

// 给局面打分
int PositionStruct::Evaluate ( void ) {
	return 0;
}
