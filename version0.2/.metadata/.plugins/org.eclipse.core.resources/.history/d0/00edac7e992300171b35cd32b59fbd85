#include "evaluate.h"
#include "search.h"
#include "position.h"
#include "move.h"

// 打分，子力平衡
int PositionStruct::Material ( void ) {
	// 1. 计算局面阶段分值
	int MIDV = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		// 计算马的分值
		for ( int i = KNIGHT_FROM; i <= KNIGHT_TO; i ++ ) {
			if ( piece[i+ST] ) {
				MIDV += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 计算车的分值
		for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) {
			if ( piece[i+ST] ) {
				MIDV += ROOK_MIDGAME_VALUE;
			}
		}
		// 计算炮的分值
		for ( int i = CANNON_FROM; i <= CANNON_TO; i ++ ) {
			if ( piece[i+ST] ) {
				MIDV += KNIGHT_CANNON_MIDGAME_VALUE;
			}
		}
		// 计算其他子的分值，不计算将的
		for ( int i = ADVISOR_FROM; i <= BISHOP_TO; i ++ ) {
			if ( piece[i+ST] ) {
				MIDV += OTHER_MIDGAME_VALUE;
			}
		}
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			if ( piece[i+ST] ) {
				MIDV += OTHER_MIDGAME_VALUE;
			}
		}
	}

	// 2. 计算攻击状态分值
	int attck = 0;
	int attcked = 0;
	int ST = SIDE_TYPE ( player );
	int OP = OPP_SIDE_TYPE ( player );
	// 计算马和车的分值
	for ( int i = KNIGHT_FROM; i <= ROOK_TO; i ++ ) {
		if ( piece[i+ST] && InOppSideBoard(i+ST, piece[i+ST]) ) {
			attck += 2;
		}
		if ( piece[i+OP] && InOppSideBoard(i+OP, piece[i+OP]) ) {
			attcked += 2;
		}
	}
	// 计算炮和兵的分值
	for ( int i = CANNON_FROM; i <= PAWN_TO; i ++ ) {
		if ( piece[i+ST] && InOppSideBoard(i+ST, piece[i+ST]) ) {
			attck += 1;
		}
		if ( piece[i+OP] && InOppSideBoard(i+OP, piece[i+OP]) ) {
			attcked += 1;
		}
	}
	// 计算轻子数差
	int d = 0;
	for ( int i = KNIGHT_FROM; i <= CANNON_TO; i ++ ) {
		if ( piece[i+ST] > 0 && piece[i+OP] == 0 ) {
			d ++;
		}
		if ( piece[i+ST] == 0 && piece[i+OP] > 0 ) {
			d --;
		}
	}
	for ( int i = ROOK_FROM; i <= ROOK_TO; i ++ ) { // 车多计算一次
		if ( piece[i+ST] > 0 && piece[i+OP] == 0 ) {
			d ++;
		}
		if ( piece[i+ST] == 0 && piece[i+OP] > 0 ) {
			d --;
		}
	}
	// 再更新攻击状态分值
	d > 0 ? (attck += d * 2) : (attcked += d * 2);
	attck = MIN ( attck, TOTAL_ATTACK_VALUE ); // 最多不超过8
	attcked = MIN ( attcked, TOTAL_ATTACK_VALUE );


	// 3. 计算子力平衡分值
	int val = 0;
	for ( int ST = 0; ST < 2; ST ++ ) {
		int ATTCK = (ST == 0) ? attck : attcked;
		int ATTCKED = (ST == 0) ? attcked : attck;
		// 将
		for ( int i = KING_FROM; i <= KING_TO; i ++ ) {
			int p = 0;
			val += ( MIDV * ATTCK * MIDGAME_ATTACKING_KING_PAWN[p] +
					(TOTAL_MIDGAME_VALUE - MIDV) * ATTCK * ENDGAME_ATTACKING_KING_PAWN[p] +
					MIDV * (TOTAL_ATTACK_VALUE - ATTCK) * MIDGAME_ATTACKLESS_KING_PAWN[p] +
					(TOTAL_MIDGAME_VALUE - MIDV) * (TOTAL_ATTACK_VALUE - ATTCK) * ENDGAME_ATTACKLESS_KING_PAWN[p] )
							/ (TOTAL_MIDGAME_VALUE * TOTAL_ATTACK_VALUE);
		}
		// 士
		for ( int i = ADVISOR_FROM; i <= ADVISOR_TO; i ++ ) {
			int p = 0;
			val += ( ATTCKED * THREATENED_ADVISOR_BISHOP[p] +
					(TOTAL_ATTACK_VALUE - ATTCKED) * THREATLESS_ADVISOR_BISHOP[p])
							/ TOTAL_ATTACK_VALUE;
		}
		// 象
		for ( int i = BISHOP_FROM; i <= BISHOP_TO; i ++ ) {
			int p = 0;
			val += ( ATTCKED * THREATENED_ADVISOR_BISHOP[p] +
					(TOTAL_ATTACK_VALUE - ATTCKED) * THREATLESS_ADVISOR_BISHOP[p])
							/ TOTAL_ATTACK_VALUE;
		}
		// 马
		// 车
		// 炮
		// 兵
		for ( int i = PAWN_FROM; i <= PAWN_TO; i ++ ) {
			int p = 0;
			val += ( MIDV * ATTCK * MIDGAME_ATTACKING_KING_PAWN[p] +
					(TOTAL_MIDGAME_VALUE - MIDV) * ATTCK * ENDGAME_ATTACKING_KING_PAWN[p] +
					MIDV * (TOTAL_ATTACK_VALUE - ATTCK) * MIDGAME_ATTACKLESS_KING_PAWN[p] +
					(TOTAL_MIDGAME_VALUE - MIDV) * (TOTAL_ATTACK_VALUE - ATTCK) * ENDGAME_ATTACKLESS_KING_PAWN[p] )
							/ (TOTAL_MIDGAME_VALUE * TOTAL_ATTACK_VALUE);
		}
	}

	return val;
}

// 打分，车的灵活性
int PositionStruct::RookMobility ( void ) {
	return 0;
}

// 打分，马的阻碍
int PositionStruct::KnightTrap ( void ) {
	return 0;
}

// 给局面打分
int PositionStruct::Evaluate ( void ) {
	return 0;
}
