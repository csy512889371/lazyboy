#include "search.h"
#include "base.h"
#include "hash.h"
#include "position.h"
#include "rollback.h"
#include "movesort.h"
#include "evaluate.h"
#include "hashtable.h"
#include "debug.h"

SearchStruct Search;

// 无害裁剪
int HarmlessPruning ( void ) {
	// 1. 和局局面
	if ( Search.pos.IsDraw() ) {
		return 0; // eleeye上表示，为了安全起见，不用pos.DrawValue()
	}

	// 2. 路径重复
	int vRep = Search.roll.RepStatus ();
	if ( vRep != REP_NONE ) {
		return Search.roll.RepValue ( vRep );
	}

	return -MATE_VALUE;
}

// 主要遍历搜索
int SearchPV ( int depth, int alpha, int beta ) {
	int mv, v;
	int bestv = -MATE_VALUE;
	Search.bestmv = 0;
	MoveSortStruct mvsort;

	// 1. 打分
	if ( depth <= 0 ) {
		return Evaluate ();
	}

	// 2. 无害裁剪
	v = HarmlessPruning ();
	if ( v > -MATE_VALUE ) {
		return v;
	}

	// 3. 置换裁剪
	if ( Search.pos.nDistance > 0 ) {
		v = QueryHashTable ();
		if ( v > bestv ) {
			bestv = v;
			if ( v >= beta ) {
				return bestv;
			}
			if ( bestv > alpha ) {
				alpha = bestv;
			}
		}
	}

	// 4. 生成着法
	mvsort.InitPV ();

	// 5. 递归搜索
	while ( (mv = mvsort.NextPV()) != 0 ) {
		Search.pos.MakeMove ( mv ); // 走一步
		int v = -SearchPV ( depth - 1, -beta, -alpha ); // 搜下一层
		Search.pos.UndoMakeMove (); // 回一步
		if ( v > bestv ) {
			bestv = v;
			Search.bestmv = mv;
			if ( bestv >= beta ) {
				InsertHashTable ( depth );
				return v;
			}
			if ( bestv > alpha ) {
				alpha = bestv;
			}
		}
	}
	InsertHashTable ( depth );
	return bestv;
}

// 迭代加深搜索
void MainSearch ( void ) {
	double totalTime = 0;
	for ( int depth = 1; depth <= 30 ; depth ++ ) {
		// 1. 清空置换表
		ClearHashTable ();

		// 2. 搜索、计算时间
		clock_t startT = clock();
		int val = SearchPV ( depth, -MATE_VALUE, MATE_VALUE );
		double timeCost = (double) ( clock() - startT ) / CLOCKS_PER_SEC;
		printf("Search done, Depth: %d, Val: %d, Time taken: %.2fs\n", depth, val, timeCost);
		totalTime += timeCost;

		// 3. 找到解
		if ( val > - BAN_VALUE ) {
			break;
		}
	}
	printf("TotalTime = %.2fs\n", totalTime);
}
