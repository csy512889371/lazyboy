#include "debug.h"
#include "base.h"
#include "position.h"
#include "hash.h"
#include "move.h"
#include "movesort.h"
#include "search.h"
#include "ucci.h"
#include "time.h"
#include <string>
#include <cstdio>

const int DEBUG_ACCEPTED = 0;
const int DEBUG_TIME_NODE = 1;
const int DEBUG_MOVESORT_EVALUATE = 2;

struct DataStruct {
	std::string FenStr;
	std::string MoveStr;
	int MoveNum;
	int id;
	std::string name;
};

DataStruct Data[250];
int nData;

std::string GetString ( const char *inputS ) {
	if ( inputS == NULL ) {
		return "";
	}
	std::string s = "";
	int i = 0;
	while ( inputS[i] != '\0' ) {
		s += inputS[i];
		i ++;
	}
	return s;
}

void ReadData ( void ) {
	freopen ("/Users/peteryuanpan/Desktop/毕业设计/lazyboy-master/version0.2/data/data.txt", "r", stdin);
	nData = 0;
	while ( true ) {
		CommEnum Order = IdleLine ( Command, 0 );
		if ( Order == e_CommQuit ) {
			break;
		}
		else if ( Order == e_CommAnnotation ) {
			++ nData;
			std::string s = (std::string) Command.Annotation.String;
			s = s.erase ( 0, s.find(' ') + 1 );
			Data[nData].id = std::stoi( s.substr(0, s.find(' ')) );
			s = s.erase ( 0, s.find(' ') + 1 );
			Data[nData].name = s;
		}
		else if ( Order == e_CommPosition ) {
			Data[nData].FenStr = GetString ( Command.Position.FenStr );
			Data[nData].MoveStr = GetString ( Command.Position.MoveStr );
			Data[nData].MoveNum = Command.Position.MoveNum;
		}
	}
}

void NewGame ( void ) {
	roll.Init ();
	InitZobrist ();
	InitMove ();
	InitHashTable ( 26 ); // 26 = 64 MB
	ClearHashTable ();
	ClearHistoryKillerTable ();
}

void DebugAccepted ( void ) {

}

void DebugTimeNode ( void ) {
	ReadData ();
	for ( int i = 1 ; i <= nData; i ++ ) {
		pos.Init ( Data[i].FenStr.c_str(), Data[i].MoveStr.c_str(), Data[i].MoveNum );
		NewGame ();
		MainSearch ();
	}
}

void DebugMovesortEvaluate ( void ) {

}

void MainDebug ( void ) {
	int DEBUG_TYPE = 1; //
	switch ( DEBUG_TYPE ) {
		case DEBUG_ACCEPTED:
			DebugAccepted ();
			break;

		case DEBUG_TIME_NODE:
			DebugTimeNode ();
			break;

		case DEBUG_MOVESORT_EVALUATE:
			DebugMovesortEvaluate ();
			break;

		default:
			break;
	}
}
