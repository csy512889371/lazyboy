#include "hashtable.h"
#include "base.h"
#include "search.h"
#include "evaluate.h"

const int HashTableNum = 1 << 20;
HashTableStruct HashTable[ HashTableNum ];
const int HashTableMask = HashTableNum - 1;

void ClearHashTable ( void ) {
	for ( int i = 0; i < HashTableNum; i ++ ) {
		HashTable[i].depth = 0;
		HashTable[i].zorb1 = 0;
		HashTable[i].zorb2 = 0;
		HashTable[i].val = 0;
	}
}

void InsertHashTable ( const int depth, const int val ) {
	if ( val > - BAN_VALUE ) { // !!
		const int t = Search.pos.zobrist.first & HashTableMask;
		HashTable[t].depth = depth;
		HashTable[t].zorb1 = Search.pos.zobrist.first;
		HashTable[t].zorb2 = Search.pos.zobrist.second;
		HashTable[t].val = val;
	}
}

int QueryHashTable ( const int depth ) {
	const int t = Search.pos.zobrist.first & HashTableMask;
	if ( HashTable[t].zorb1 == Search.pos.zobrist.first && HashTable[t].zorb2 == Search.pos.zobrist.second ) {
		if ( depth >= HashTable[t].depth ) {
			return HashTable[t].val;
		}
	}
	return - MATE_VALUE;
}

